public class SudokuBoard {
	private int size = 9; 
    private int[][] board;
    private int[][] solution;
    private int mistakes;

    public SudokuBoard(int level) {
        board = new int[size][size];
        solution = new int[size][size];
        mistakes = 0;
        createPlayerBoard(level);
    }

    public void createPlayerBoard(int level) {
        // Define different levels
      int[][] easyBoard = {
            {5, 3, 0, 0, 7, 0, 0, 1, 2},
            {6, 0, 0, 1, 9, 5, 3, 0, 0},
            {0, 9, 8, 0, 0, 0, 5, 6, 0},
            {8, 0, 9, 0, 6, 0, 4, 0, 3},
            {4, 0, 0, 8, 0, 3, 0, 0, 1},
            {7, 0, 0, 0, 2, 0, 0, 0, 6},
            {0, 6, 0, 0, 0, 0, 2, 8, 0},
            {2, 8, 0, 4, 1, 9, 0, 0, 5},
            {3, 0, 5, 2, 8, 0, 0, 7, 9}
        };

        int[][] easySolution = {
            {5, 3, 4, 6, 7, 8, 9, 1, 2},
            {6, 7, 2, 1, 9, 5, 3, 4, 8},
            {1, 9, 8, 3, 4, 2, 5, 6, 7},
            {8, 5, 9, 7, 6, 1, 4, 2, 3},
            {4, 2, 6, 8, 5, 3, 7, 9, 1},
            {7, 1, 3, 9, 2, 4, 8, 5, 6},
            {9, 6, 1, 5, 3, 7, 2, 8, 4},
            {2, 8, 7, 4, 1, 9, 6, 3, 5},
            {3, 4, 5, 2, 8, 6, 1, 7, 9}
        };

        int[][] hardBoard = {
            {0, 0, 0, 0, 0, 0, 2, 0, 0},
            {0, 8, 0, 0, 0, 7, 0, 9, 6},
            {6, 0, 2, 0, 0, 0, 5, 0, 0},
            {0, 7, 0, 0, 6, 0, 0, 0, 0},
            {0, 0, 0, 9, 0, 1, 0, 0, 0},
            {0, 0, 0, 0, 2, 0, 0, 4, 0},
            {0, 0, 5, 0, 0, 0, 6, 0, 3},
            {0, 9, 0, 4, 0, 0, 0, 7, 0},
            {0, 0, 6, 0, 0, 0, 0, 0, 0}
        };

        int[][] hardSolution = {
            {9, 5, 7, 6, 1, 3, 2, 8, 4},
            {4, 8, 3, 2, 5, 7, 1, 9, 6},
            {6, 1, 2, 8, 4, 9, 5, 3, 7},
            {1, 7, 8, 3, 6, 4, 9, 5, 2},
            {5, 2, 4, 9, 7, 1, 3, 6, 8},
            {3, 6, 9, 5, 2, 8, 7, 4, 1},
            {8, 4, 5, 7, 9, 2, 6, 1, 3},
            {2, 9, 1, 4, 3, 6, 8, 7, 5},
            {7, 3, 6, 1, 8, 5, 4, 2, 9}
        };

        int[][] impossiBoard = {
            {0, 0, 0, 8, 0, 1, 0, 0, 0},
            {0, 0, 0, 0, 0, 0, 0, 4, 3},
            {5, 0, 0, 0, 0, 0, 0, 0, 0},
            {0, 0, 0, 0, 7, 0, 8, 0, 0},
            {0, 0, 0, 0, 0, 0, 1, 0, 0},
            {0, 2, 0, 0, 3, 0, 0, 0, 0},
            {6, 0, 0, 0, 0, 0, 0, 7, 5},
            {0, 0, 3, 4, 0, 0, 0, 0, 0},
            {0, 0, 0, 2, 0, 0, 6, 0, 0}
        };

        int[][] impossiSolution = {
            {2, 3, 7, 8, 4, 1, 5, 6, 9},
            {1, 8, 6, 7, 9, 5, 2, 4, 3},
            {5, 9, 4, 3, 2, 6, 7, 1, 8},
            {3, 1, 5, 6, 7, 4, 8, 9, 2},
            {4, 6, 9, 5, 8, 2, 1, 3, 7},
            {7, 2, 8, 1, 3, 9, 4, 5, 6},
            {6, 4, 2, 9, 1, 8, 3, 7, 5},
            {8, 5, 3, 4, 6, 7, 9, 2, 1},
            {9, 7, 1, 2, 5, 3, 6, 8, 4}
        };

        // selecting board based on the level given in M
        board = easyBoard;
        solution = easySolution;
        if (level == 2) {
            board = hardBoard;
            solution = hardSolution;
        } else if (level == 3) {
            board = impossiBoard;
            solution = impossiSolution;
        }
    }

	//iterate and print every 3 and not on index 0

    public void displayBoard() {
        for (int i = 0; i < size; i++) {
            if (i % 3 == 0 && i != 0) {
                System.out.println("-----------");
            }

            for (int k = 0; k < size; k++) {
                if (k % 3 == 0 && k != 0) {
                    System.out.print("|");
                }

                if (board[i][k] == 0) {
                    System.out.print("0");
                } else {
                    System.out.print(board[i][k]);
                }
            }
			
            System.out.println("");
        }
    }

	//make sure the value is correct

    public boolean validMove(int row, int col, int val) {
        return val == solution[row][col];
    }

	//input the number 
	
    public void inputNum(int row, int col, int val) {
        if (board[row][col] == 0) {
            if (validMove(row, col, val) && board[row][col] == 0) {
                board[row][col] = val;
				System.out.print("\033c");
                System.out.println("\u001B[32mCorrect!\u001B[0m"); //Green
            } else {
                mistakes++;
				System.out.print("\033c");
                System.out.println("\u001B[31mIncorrect!\u001B[0m"); // Red
            }
        } else {
            System.out.println("Invalid move. This cell may be filled. Try again.");
        }
    }

	//check  is the board is full or not
	
    public boolean boardFull() {
        for (int i = 0; i < size; i++) {
            for (int k = 0; k < size; k++) {
                if (board[i][k] == 0) {
                    return false;
                }
            }
        }
        return true;
    }
    // game is over after 3 mistakes, reset
    public boolean gameOver() {
        return mistakes >= 3;
    }

	//checks if the board is fully solved
    public boolean isSolved() {
        return boardFull();
    }
}
